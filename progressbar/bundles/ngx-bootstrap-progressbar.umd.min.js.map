{"version":3,"sources":["../../../../src/progressbar/bar.component.ts","../../../../src/progressbar/bar.component.html","../../../../src/progressbar/progressbar.config.ts","../../../../src/progressbar/progressbar.component.html","../../../../src/progressbar/progressbar.component.ts","../../../../src/progressbar/progressbar.module.ts"],"names":["BarComponent","el","renderer","this","max","value","animate","striped","type","percent","Object","defineProperty","prototype","isBs3","ngOnChanges","changes","Number","currentValue","_a","applyTypeClasses","_prevType","barTypeClass","bgClass","removeClass","nativeElement","addClass","i0","ElementRef","Renderer2","selectors","hostAttrs","hostVars","hostBindings","rf","ctx","i0.ɵɵprojection","Component","selector","templateUrl","changeDetection","ChangeDetectionStrategy","OnPush","host","role","Input","i0.ɵɵelementContainer","i0.ɵɵelementStart","i0.ɵɵelementEnd","i0.ɵɵproperty","ctx_r2","_value","i0.ɵɵtext","item_r6","ctx_r5","i0.ɵɵadvance","i0.ɵɵtextInterpolate","i0.ɵɵtemplate","ProgressbarConfig","factory","providedIn","Injectable","ProgressbarComponent","config","isStacked","assign","Array","isArray","_values","_r1","_r3","styles","ProgressbarModule","forRoot","ngModule","providers","imports","CommonModule","declarations","exports","NgModule"],"mappings":"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","sourcesContent":["import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  Renderer2,\n  SimpleChanges\n} from '@angular/core';\n\nimport { isBs3 } from 'ngx-bootstrap/utils';\nimport { ProgressbarType } from './progressbar-type.interface';\n\n@Component({\n  selector: 'bar',\n  templateUrl: './bar.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  // eslint-disable-next-line @angular-eslint/no-host-metadata-property\n  host: {\n    role: 'progressbar',\n    'aria-valuemin': '0',\n    '[class.progress-bar]': 'true',\n    '[class.progress-bar-animated]': '!isBs3 && animate',\n    '[class.progress-bar-striped]': 'striped',\n    '[class.active]': 'isBs3 && animate',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-valuetext]': 'percent ? percent.toFixed(0) + \"%\" : \"\"',\n    '[attr.aria-valuemax]': 'max',\n    '[style.height.%]': '\"100\"',\n    '[style.width.%]': 'percent'\n  }\n})\nexport class BarComponent implements OnChanges {\n  /** maximum total value of progress element */\n  @Input() max = 100;\n\n  /** current value of progress bar */\n  @Input() value? = 0;\n\n  /** if `true` changing value of progress bar will be animated */\n  @Input() animate? = false;\n\n  /** If `true`, striped classes are applied */\n  @Input() striped? = false;\n\n  /** provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger` */\n  @Input() type?: ProgressbarType = 'info';\n\n  percent = 100;\n\n  get isBs3(): boolean {\n    return isBs3();\n  }\n\n  private _prevType?: string;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.value || changes.max) {\n      this.percent = 100 * (Number(changes.value.currentValue || 0)\n        / Number((changes.max?.currentValue || this.max) || 100));\n    }\n\n    if (changes.type) {\n      this.applyTypeClasses();\n    }\n  }\n\n  private applyTypeClasses(): void {\n    if (this._prevType) {\n      const barTypeClass = `progress-bar-${this._prevType}`;\n      const bgClass = `bg-${this._prevType}`;\n      this.renderer.removeClass(this.el.nativeElement, barTypeClass);\n      this.renderer.removeClass(this.el.nativeElement, bgClass);\n      this._prevType = void 0;\n    }\n\n    if (this.type) {\n      const barTypeClass = `progress-bar-${this.type}`;\n      const bgClass = `bg-${this.type}`;\n      this.renderer.addClass(this.el.nativeElement, barTypeClass);\n      this.renderer.addClass(this.el.nativeElement, bgClass);\n      this._prevType = this.type;\n    }\n  }\n}\n","<ng-content></ng-content>\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProgressbarConfig {\n  /** if `true` changing value of progress bar will be animated */\n  animate = false;\n  /** maximum total value of progress element */\n  max = 100;\n}\n","<ng-container *ngIf=\"!isStacked then NotStacked else Stacked\"></ng-container>\n\n<ng-template #NotStacked>\n  <bar [type]=\"type\" [value]=\"_value\" [max]=\"max\" [animate]=\"animate\" [striped]=\"striped\">\n    <ng-content></ng-content>\n  </bar>\n</ng-template>\n\n<ng-template #Stacked>\n  <bar *ngFor=\"let item of _values\"\n       [type]=\"item.type\" [value]=\"item.value\" [max]=\"item.max\" [animate]=\"animate\" [striped]=\"striped\">{{ item.label }}</bar>\n</ng-template>\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { BarValue, ProgressbarType } from './progressbar-type.interface';\nimport { ProgressbarConfig } from './progressbar.config';\n\n@Component({\n  selector: 'progressbar',\n  templateUrl: './progressbar.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  // eslint-disable-next-line @angular-eslint/no-host-metadata-property\n  host: {\n    '[class.progress]': 'true',\n    '[attr.max]': 'max'\n  },\n  styles: [`\n    :host {\n      width: 100%;\n      display: flex;\n    } `]\n})\nexport class ProgressbarComponent {\n  /** maximum total value of progress element */\n  @Input() max = 100;\n\n  /** if `true` changing value of progress bar will be animated */\n  @Input() animate = false;\n\n  /** If `true`, striped classes are applied */\n  @Input() striped = false;\n\n  /** provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger` */\n  @Input() type?: ProgressbarType;\n\n  /** current value of progress bar. Could be a number or array of objects\n   * like {\"value\":15,\"type\":\"info\",\"label\":\"15 %\"}\n   */\n  @Input()\n  set value(value: number | BarValue[]) {\n    this.isStacked = Array.isArray(value);\n    if (typeof value === 'number') {\n      this._value = value;\n      this._values = void 0;\n    } else {\n      this._value = void 0;\n      this._values = value;\n    }\n  }\n\n  isStacked = false;\n  _value? = 0;\n  _values?: BarValue[];\n\n  constructor(config: ProgressbarConfig) {\n    Object.assign(this, config);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { BarComponent } from './bar.component';\nimport { ProgressbarComponent } from './progressbar.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [BarComponent, ProgressbarComponent],\n  exports: [BarComponent, ProgressbarComponent]\n})\nexport class ProgressbarModule {\n  static forRoot(): ModuleWithProviders<ProgressbarModule> {\n    return { ngModule: ProgressbarModule, providers: [] };\n  }\n}\n"]}