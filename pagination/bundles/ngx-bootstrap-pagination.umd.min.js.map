{"version":3,"sources":["../../../../src/pagination/pagination.config.ts","../../../../src/pagination/pager.component.ts","../../../../src/pagination/pager.component.html","../../../../src/pagination/pagination.component.html","../../../../src/pagination/pagination.component.ts","../../../../src/pagination/pagination.module.ts"],"names":["this","main","itemsPerPage","boundaryLinks","directionLinks","firstText","previousText","nextText","lastText","pageBtnClass","rotate","pager","align","PaginationConfig","factory","providedIn","Injectable","PAGER_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","PagerComponent","multi","elementRef","paginationConfig","changeDetection","disabled","numPages","EventEmitter","pageChanged","onChange","Function","prototype","onTouched","classMap","inited","_itemsPerPage","_totalItems","_totalPages","_page","config","configureOptions","Object","assign","defineProperty","v","totalPages","calculateTotalPages","emit","selectPage","page","value","_previous","markForCheck","ngOnInit","window","nativeElement","getAttribute","maxSize","_a","_b","_c","_d","_e","_f","pages","getPages","writeValue","getText","key","noPrevious","noNext","registerOnChange","fn","registerOnTouched","event","preventDefault","target","blur","makePage","num","text","active","number","currentPage","startPage","endPage","isMaxSized","Math","max","floor","ceil","min","toString","push","previousPageSet","unshift","nextPageSet","totalItems","i0","ElementRef","ChangeDetectorRef","selectors","inputs","outputs","features","decls","vars","consts","template","rf","ctx","i0.ɵɵelementStart","i0.ɵɵlistener","$event","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵadvance","i0.ɵɵclassMap","i0.ɵɵclassProp","i0.ɵɵproperty","i0.ɵɵtextInterpolate","Component","selector","templateUrl","providers","Input","Output","i0.ɵɵelementContainer","_c0$1","ctx_r0","ctx_r1","ctx_r2","pg_r19","_c1$1","ctx_r3","ctx_r4","PAGINATION_CONTROL_VALUE_ACCESSOR","PaginationComponent","customPageTemplate","customNextTemplate","customPreviousTemplate","customFirstTemplate","customLastTemplate","i0.ɵɵtemplate","PaginationModule","forRoot","ngModule","imports","CommonModule","declarations","exports","NgModule"],"mappings":"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","sourcesContent":["// todo: split\nimport { Injectable } from '@angular/core';\n\nimport { ConfigModel, PagerModel } from './models';\n\n/** Provides default values for Pagination and pager components */\n@Injectable({\n  providedIn: 'root'\n})\nexport class PaginationConfig {\n  main: Partial<ConfigModel> = {\n    itemsPerPage: 10,\n    boundaryLinks: false,\n    directionLinks: true,\n    firstText: 'First',\n    previousText: 'Previous',\n    nextText: 'Next',\n    lastText: 'Last',\n    pageBtnClass: '',\n    rotate: true\n  };\n  pager: PagerModel = {\n    itemsPerPage: 15,\n    previousText: '« Previous',\n    nextText: 'Next »',\n    pageBtnClass: '',\n    align: true\n  };\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnInit,\n  Output,\n  Provider\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { ConfigModel, PagesModel } from './models';\n\nimport { PageChangedEvent } from './pagination.component';\nimport { PaginationConfig } from './pagination.config';\n\nexport const PAGER_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => PagerComponent),\n  multi: true\n};\n\n@Component({\n  selector: 'pager',\n  templateUrl: './pager.component.html',\n  providers: [PAGER_CONTROL_VALUE_ACCESSOR]\n})\nexport class PagerComponent implements ControlValueAccessor, OnInit {\n  config?: Partial<ConfigModel>;\n  /** if `true` aligns each link to the sides of pager */\n  @Input() align = false;\n  /** limit number for page links in pager */\n  @Input() maxSize?: number;\n  /** if false first and last buttons will be hidden */\n  @Input() boundaryLinks = false;\n  /** if false previous and next buttons will be hidden */\n  @Input() directionLinks = true;\n  // labels\n  /** first button text */\n  @Input() firstText = 'First';\n  /** previous button text */\n  @Input() previousText = '« Previous';\n  /** next button text */\n  @Input() nextText = 'Next »';\n  /** last button text */\n  @Input() lastText = 'Last';\n  /** if true current page will in the middle of pages list */\n  @Input() rotate = true;\n  // css\n  /** add class to <code><li\\></code> */\n  @Input() pageBtnClass = '';\n\n  /** if true pagination component will be disabled */\n  @Input() disabled = false;\n\n  /** fired when total pages count changes, $event:number equals to total pages count */\n  @Output() numPages = new EventEmitter<number>();\n  /** fired when page was changed, $event:{page, itemsPerPage} equals to\n   * object with current page index and number of items per page\n   */\n  @Output()\n  pageChanged = new EventEmitter<PageChangedEvent>();\n  onChange = Function.prototype;\n  onTouched = Function.prototype;\n  classMap = '';\n  pages?: PagesModel[];\n  protected inited = false;\n\n  constructor(private elementRef: ElementRef,\n              paginationConfig: PaginationConfig,\n              private changeDetection: ChangeDetectorRef) {\n    this.elementRef = elementRef;\n    if (!this.config) {\n      this.configureOptions(\n        Object.assign({}, paginationConfig.main, paginationConfig.pager)\n      );\n    }\n  }\n\n  protected _itemsPerPage = 15;\n\n  /** maximum number of items per page. If value less than 1 will display all items on one page */\n  @Input()\n  get itemsPerPage(): number {\n    return this._itemsPerPage;\n  }\n\n  set itemsPerPage(v: number) {\n    this._itemsPerPage = v;\n    this.totalPages = this.calculateTotalPages();\n  }\n\n  protected _totalItems = 0;\n\n  /** total number of items in all pages */\n  @Input()\n  get totalItems(): number {\n    return this._totalItems;\n  }\n\n  set totalItems(v: number) {\n    this._totalItems = v;\n    this.totalPages = this.calculateTotalPages();\n  }\n\n  protected _totalPages = 0;\n\n  get totalPages(): number {\n    return this._totalPages;\n  }\n\n  set totalPages(v: number) {\n    this._totalPages = v;\n    this.numPages.emit(v);\n    if (this.inited) {\n      this.selectPage(this.page);\n    }\n  }\n\n  protected _page = 1;\n\n  get page(): number {\n    return this._page;\n  }\n\n  set page(value: number) {\n    const _previous = this._page;\n    this._page = value > this.totalPages ? this.totalPages : value || 1;\n    this.changeDetection.markForCheck();\n\n    if (_previous === this._page || typeof _previous === 'undefined') {\n      return;\n    }\n\n    this.pageChanged.emit({\n      page: this._page,\n      itemsPerPage: this.itemsPerPage\n    });\n  }\n\n  configureOptions(config: Partial<ConfigModel>): void {\n    this.config = Object.assign({}, config);\n  }\n\n  ngOnInit(): void {\n    if (typeof window !== 'undefined') {\n      this.classMap = this.elementRef.nativeElement.getAttribute('class') || '';\n    }\n    // watch for maxSize\n    if (typeof this.maxSize === 'undefined') {\n      this.maxSize = this.config?.maxSize || 0;\n    }\n\n    if (typeof this.rotate === 'undefined') {\n      this.rotate = !!this.config?.rotate;\n    }\n\n    if (typeof this.boundaryLinks === 'undefined') {\n      this.boundaryLinks = !!this.config?.boundaryLinks;\n    }\n\n\n    if (typeof this.directionLinks === 'undefined') {\n      this.directionLinks = !!this.config?.directionLinks;\n    }\n\n    if (typeof this.pageBtnClass === 'undefined') {\n      this.pageBtnClass = this.config?.pageBtnClass || '';\n    }\n\n    // base class\n    if (typeof this.itemsPerPage === 'undefined') {\n      this.itemsPerPage = this.config?.itemsPerPage || 0;\n    }\n\n    this.totalPages = this.calculateTotalPages();\n    // this class\n    this.pages = this.getPages(this.page, this.totalPages);\n    this.inited = true;\n  }\n\n  writeValue(value: number): void {\n    this.page = value;\n    this.pages = this.getPages(this.page, this.totalPages);\n  }\n\n  getText(key: string): string {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (this as any)[`${key}Text`] || (this as any).config[`${key}Text`];\n  }\n\n  noPrevious(): boolean {\n    return this.page === 1;\n  }\n\n  noNext(): boolean {\n    return this.page === this.totalPages;\n  }\n\n  registerOnChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  selectPage(page: number, event?: Event): void {\n    if (event) {\n      event.preventDefault();\n    }\n\n    if (!this.disabled) {\n      if (event && event.target) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const target: any = event.target;\n        target.blur();\n      }\n      this.writeValue(page);\n      this.onChange(this.page);\n    }\n  }\n\n  // Create page object used in template\n  protected makePage(num: number,\n                     text: string,\n                     active: boolean): { number: number; text: string; active: boolean } {\n    return { text, number: num, active };\n  }\n\n  protected getPages(currentPage: number, totalPages: number): PagesModel[] {\n    const pages: PagesModel[] = [];\n\n    // Default page limits\n    let startPage = 1;\n    let endPage = totalPages;\n    const isMaxSized =\n      typeof this.maxSize !== 'undefined' && this.maxSize < totalPages;\n\n    // recompute if maxSize\n    if (isMaxSized && this.maxSize) {\n      if (this.rotate) {\n        // Current page is displayed in the middle of the visible ones\n        startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);\n        endPage = startPage + this.maxSize - 1;\n\n        // Adjust if limit is exceeded\n        if (endPage > totalPages) {\n          endPage = totalPages;\n          startPage = endPage - this.maxSize + 1;\n        }\n      } else {\n        // Visible pages are paginated with maxSize\n        startPage =\n          (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;\n\n        // Adjust last page if limit is exceeded\n        endPage = Math.min(startPage + this.maxSize - 1, totalPages);\n      }\n    }\n\n    // Add page number links\n    for (let num = startPage; num <= endPage; num++) {\n      const page = this.makePage(num, num.toString(), num === currentPage);\n      pages.push(page);\n    }\n\n    // Add links to move between page sets\n    if (isMaxSized && !this.rotate) {\n      if (startPage > 1) {\n        const previousPageSet = this.makePage(startPage - 1, '...', false);\n        pages.unshift(previousPageSet);\n      }\n\n      if (endPage < totalPages) {\n        const nextPageSet = this.makePage(endPage + 1, '...', false);\n        pages.push(nextPageSet);\n      }\n    }\n\n    return pages;\n  }\n\n  // base class\n  protected calculateTotalPages(): number {\n    const totalPages =\n      this.itemsPerPage < 1\n        ? 1\n        : Math.ceil(this.totalItems / this.itemsPerPage);\n\n    return Math.max(totalPages || 0, 1);\n  }\n}\n","<ul class=\"pager\">\n  <li [class.disabled]=\"noPrevious()\" [class.previous]=\"align\"\n      [ngClass]=\"{'pull-left': align, 'float-left': align}\"\n      class=\"{{ pageBtnClass }}\">\n    <a href (click)=\"selectPage(page - 1, $event)\">{{ getText('previous') }}</a>\n  </li>\n  <li [class.disabled]=\"noNext()\" [class.next]=\"align\"\n      [ngClass]=\"{'pull-right': align, 'float-right': align}\"\n      class=\"{{ pageBtnClass }}\">\n    <a href (click)=\"selectPage(page + 1, $event)\">{{ getText('next') }}</a>\n  </li>\n</ul>\n","<ul class=\"pagination\" [ngClass]=\"classMap\">\n  <li class=\"pagination-first page-item\"\n      *ngIf=\"boundaryLinks\"\n      [class.disabled]=\"noPrevious() || disabled\">\n    <a class=\"page-link\" href (click)=\"selectPage(1, $event)\">\n      <ng-container [ngTemplateOutlet]=\"customFirstTemplate || defaultFirstTemplate\"\n                   [ngTemplateOutletContext]=\"{disabled: noPrevious() || disabled, currentPage: page}\">\n      </ng-container>\n    </a>\n  </li>\n\n  <li class=\"pagination-prev page-item\"\n      *ngIf=\"directionLinks\"\n      [class.disabled]=\"noPrevious() || disabled\">\n    <a class=\"page-link\" href (click)=\"selectPage(page - 1, $event)\">\n      <ng-container [ngTemplateOutlet]=\"customPreviousTemplate || defaultPreviousTemplate\"\n                   [ngTemplateOutletContext]=\"{disabled: noPrevious() || disabled, currentPage: page}\">\n      </ng-container>\n    </a>\n  </li>\n\n  <li *ngFor=\"let pg of pages\"\n      [class.active]=\"pg.active\"\n      [class.disabled]=\"disabled && !pg.active\"\n      class=\"pagination-page page-item\">\n    <a class=\"page-link\" href (click)=\"selectPage(pg.number, $event)\">\n      <ng-container [ngTemplateOutlet]=\"customPageTemplate || defaultPageTemplate\"\n                   [ngTemplateOutletContext]=\"{disabled: disabled, $implicit: pg, currentPage: page}\">\n      </ng-container>\n    </a>\n  </li>\n\n  <li class=\"pagination-next page-item\"\n      *ngIf=\"directionLinks\"\n      [class.disabled]=\"noNext() || disabled\">\n    <a class=\"page-link\" href (click)=\"selectPage(page + 1, $event)\">\n      <ng-container [ngTemplateOutlet]=\"customNextTemplate || defaultNextTemplate\"\n                   [ngTemplateOutletContext]=\"{disabled: noNext() || disabled, currentPage: page}\">\n      </ng-container>\n    </a>\n  </li>\n\n  <li class=\"pagination-last page-item\"\n      *ngIf=\"boundaryLinks\"\n      [class.disabled]=\"noNext() || disabled\">\n    <a class=\"page-link\" href (click)=\"selectPage(totalPages, $event)\">\n      <ng-container [ngTemplateOutlet]=\"customLastTemplate || defaultLastTemplate\"\n                   [ngTemplateOutletContext]=\"{disabled: noNext() || disabled, currentPage: page}\">\n      </ng-container>\n    </a>\n  </li>\n</ul>\n\n<ng-template #defaultPageTemplate let-page>{{ page.text }}</ng-template>\n\n<ng-template #defaultNextTemplate>{{ getText('next') }}</ng-template>\n\n<ng-template #defaultPreviousTemplate>{{ getText('previous') }}</ng-template>\n\n<ng-template #defaultFirstTemplate>{{ getText('first') }}</ng-template>\n\n<ng-template #defaultLastTemplate>{{ getText('last') }}</ng-template>\n","import {\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnInit,\n  Output,\n  Provider,\n  TemplateRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ConfigModel, PagesModel, PaginationLinkContext, PaginationNumberLinkContext } from './models';\n\nimport { PaginationConfig } from './pagination.config';\n\nexport interface PageChangedEvent {\n  itemsPerPage: number;\n  page: number;\n}\n\nexport const PAGINATION_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => PaginationComponent),\n  multi: true\n};\n\n@Component({\n  selector: 'pagination',\n  templateUrl: './pagination.component.html',\n  providers: [PAGINATION_CONTROL_VALUE_ACCESSOR]\n})\nexport class PaginationComponent implements ControlValueAccessor, OnInit {\n  config?: Partial<ConfigModel>;\n  /** if `true` aligns each link to the sides of pager */\n  @Input() align = true;\n  /** limit number for page links in pager */\n  @Input() maxSize?: number;\n  /** if false first and last buttons will be hidden */\n  @Input() boundaryLinks = false;\n  /** if false previous and next buttons will be hidden */\n  @Input() directionLinks = true;\n  // labels\n  /** first button text */\n  @Input() firstText = 'First';\n  /** previous button text */\n  @Input() previousText = 'Previous';\n  /** next button text */\n  @Input() nextText = 'Next';\n  /** last button text */\n  @Input() lastText = 'Last';\n  /** if true current page will in the middle of pages list */\n  @Input() rotate = true;\n  // css\n  /** add class to <code><li\\></code> */\n  @Input() pageBtnClass = '';\n  /** if true pagination component will be disabled */\n  @Input() disabled = false;\n  /** custom template for page link */\n  @Input() customPageTemplate?: TemplateRef<PaginationNumberLinkContext>;\n  /** custom template for next link */\n  @Input() customNextTemplate?: TemplateRef<PaginationLinkContext>;\n  /** custom template for previous link */\n  @Input() customPreviousTemplate?: TemplateRef<PaginationLinkContext>;\n  /** custom template for first link */\n  @Input() customFirstTemplate?: TemplateRef<PaginationLinkContext>;\n  /** custom template for last link */\n  @Input() customLastTemplate?: TemplateRef<PaginationLinkContext>;\n\n  /** fired when total pages count changes, $event:number equals to total pages count */\n  @Output() numPages = new EventEmitter<number>();\n  /** fired when page was changed, $event:{page, itemsPerPage} equals to object\n   * with current page index and number of items per page\n   */\n  @Output() pageChanged = new EventEmitter<PageChangedEvent>();\n  onChange = Function.prototype;\n  onTouched = Function.prototype;\n  classMap = '';\n  pages?: PagesModel[];\n  protected inited = false;\n\n  constructor(\n    private elementRef: ElementRef,\n    paginationConfig: PaginationConfig,\n    private changeDetection: ChangeDetectorRef\n  ) {\n    this.elementRef = elementRef;\n    if (!this.config) {\n      this.configureOptions(paginationConfig.main);\n    }\n  }\n\n  protected _itemsPerPage = 10;\n\n  /** maximum number of items per page. If value less than 1 will display all items on one page */\n  @Input()\n  get itemsPerPage(): number {\n    return this._itemsPerPage;\n  }\n\n  set itemsPerPage(v: number) {\n    this._itemsPerPage = v;\n    this.totalPages = this.calculateTotalPages();\n  }\n\n  protected _totalItems = 0;\n\n  /** total number of items in all pages */\n  @Input()\n  get totalItems(): number {\n    return this._totalItems;\n  }\n\n  set totalItems(v: number) {\n    this._totalItems = v;\n    this.totalPages = this.calculateTotalPages();\n  }\n\n  protected _totalPages = 0;\n\n  get totalPages(): number {\n    return this._totalPages;\n  }\n\n  set totalPages(v: number) {\n    this._totalPages = v;\n    this.numPages.emit(v);\n    if (this.inited) {\n      this.selectPage(this.page);\n    }\n  }\n\n  protected _page = 1;\n\n  get page(): number {\n    return this._page;\n  }\n\n  set page(value: number) {\n    const _previous = this._page;\n    this._page = value > this.totalPages ? this.totalPages : value || 1;\n    this.changeDetection.markForCheck();\n\n    if (_previous === this._page || typeof _previous === 'undefined') {\n      return;\n    }\n\n    this.pageChanged.emit({\n      page: this._page,\n      itemsPerPage: this.itemsPerPage\n    });\n  }\n\n  configureOptions(config: Partial<ConfigModel>): void {\n    this.config = Object.assign({}, config);\n  }\n\n  ngOnInit(): void {\n    if (typeof window !== 'undefined') {\n      this.classMap = this.elementRef.nativeElement.getAttribute('class') || '';\n    }\n\n    // watch for maxSize\n    if (typeof this.maxSize === 'undefined') {\n      this.maxSize = this.config?.maxSize || 0;\n    }\n\n    if (typeof this.rotate === 'undefined') {\n      this.rotate = !!this.config?.rotate;\n    }\n\n    if (typeof this.boundaryLinks === 'undefined') {\n      this.boundaryLinks = !!this.config?.boundaryLinks;\n    }\n\n\n    if (typeof this.directionLinks === 'undefined') {\n      this.directionLinks = !!this.config?.directionLinks;\n    }\n\n    if (typeof this.pageBtnClass === 'undefined') {\n      this.pageBtnClass = this.config?.pageBtnClass || '';\n    }\n\n    // base class\n    if (typeof this.itemsPerPage === 'undefined') {\n      this.itemsPerPage = this.config?.itemsPerPage || 0;\n    }\n\n    this.totalPages = this.calculateTotalPages();\n    // this class\n    this.pages = this.getPages(this.page, this.totalPages);\n    this.inited = true;\n  }\n\n  writeValue(value: number): void {\n    this.page = value;\n    this.pages = this.getPages(this.page, this.totalPages);\n  }\n\n  getText(key: string): string {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (this as any)[`${key}Text`] || (this as any).config[`${key}Text`];\n  }\n\n  noPrevious(): boolean {\n    return this.page === 1;\n  }\n\n  noNext(): boolean {\n    return this.page === this.totalPages;\n  }\n\n  registerOnChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  selectPage(page: number, event?: Event): void {\n    if (event) {\n      event.preventDefault();\n    }\n\n    if (!this.disabled) {\n      if (event && event.target) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const target: any = event.target;\n        target.blur();\n      }\n      this.writeValue(page);\n      this.onChange(this.page);\n    }\n  }\n\n  // Create page object used in template\n  protected makePage(\n    num: number,\n    text: string,\n    active: boolean\n  ): { number: number; text: string; active: boolean } {\n    return { text, number: num, active };\n  }\n\n  protected getPages(currentPage: number, totalPages: number): PagesModel[] {\n    const pages: PagesModel[] = [];\n\n    // Default page limits\n    let startPage = 1;\n    let endPage = totalPages;\n    const isMaxSized =\n      typeof this.maxSize !== 'undefined' && this.maxSize < totalPages;\n\n    // recompute if maxSize\n    if (isMaxSized && this.maxSize) {\n      if (this.rotate) {\n        // Current page is displayed in the middle of the visible ones\n        startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);\n        endPage = startPage + this.maxSize - 1;\n\n        // Adjust if limit is exceeded\n        if (endPage > totalPages) {\n          endPage = totalPages;\n          startPage = endPage - this.maxSize + 1;\n        }\n      } else {\n        // Visible pages are paginated with maxSize\n        startPage =\n          (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;\n\n        // Adjust last page if limit is exceeded\n        endPage = Math.min(startPage + this.maxSize - 1, totalPages);\n      }\n    }\n\n    // Add page number links\n    for (let num = startPage; num <= endPage; num++) {\n      const page = this.makePage(num, num.toString(), num === currentPage);\n      pages.push(page);\n    }\n\n    // Add links to move between page sets\n    if (isMaxSized && !this.rotate) {\n      if (startPage > 1) {\n        const previousPageSet = this.makePage(startPage - 1, '...', false);\n        pages.unshift(previousPageSet);\n      }\n\n      if (endPage < totalPages) {\n        const nextPageSet = this.makePage(endPage + 1, '...', false);\n        pages.push(nextPageSet);\n      }\n    }\n\n    return pages;\n  }\n\n  // base class\n  protected calculateTotalPages(): number {\n    const totalPages =\n      this.itemsPerPage < 1\n        ? 1\n        : Math.ceil(this.totalItems / this.itemsPerPage);\n\n    return Math.max(totalPages || 0, 1);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { PagerComponent } from './pager.component';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PagerComponent, PaginationComponent],\n  exports: [PagerComponent, PaginationComponent]\n})\nexport class PaginationModule {\n  static forRoot(): ModuleWithProviders<PaginationModule> {\n    return { ngModule: PaginationModule, providers: [] };\n  }\n}\n"]}