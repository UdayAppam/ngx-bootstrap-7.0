{"version":3,"sources":["../../../../src/buttons/button-checkbox.directive.ts","../../../../src/buttons/button-radio.directive.ts","../../../../src/buttons/button-radio-group.directive.ts","../../../../src/buttons/buttons.module.ts"],"names":["CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","ButtonCheckboxDirective","multi","this","btnCheckboxTrue","btnCheckboxFalse","state","isDisabled","onChange","Function","prototype","onTouched","onClick","toggle","value","ngOnInit","trueValue","Object","defineProperty","falseValue","writeValue","setDisabledState","registerOnChange","fn","registerOnTouched","selectors","hostVars","hostBindings","rf","ctx","Directive","selector","providers","Input","HostBinding","HostListener","RADIO_CONTROL_VALUE_ACCESSOR","ButtonRadioDirective","el","cdr","renderer","group","uncheckable","role","_disabled","_hasFocus","_value","_onChange","disabled","undefined","controlOrGroupDisabled","isActive","btnRadio","toggleIfAllowed","canToggle","onSpacePressed","event","preventDefault","focus","nativeElement","onFocus","onBlur","ngOnChanges","changes","markForCheck","setAttribute","removeAttribute","i0","ElementRef","ChangeDetectorRef","Renderer2","ButtonRadioGroupDirective","$event","Optional","Inject","hasDisabledClass","tabindex","radioButtons","forEach","buttons","activeRadio","getActiveOrFocusedRadio","firstEnabled","find","r","selectNext","selectInDirection","selectPrevious","direction","buttonRadioDirectives","toArray","currentActiveIndex","indexOf","i","nextIndex","currentIndex","calcIndex","length","button","hasFocus","contentQueries","dirIndex","ContentChildren","ButtonsModule","forRoot","ngModule","declarations","exports","NgModule"],"mappings":"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","sourcesContent":["import {\n  Directive,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Input,\n  OnInit,\n  Provider\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n// TODO: config: activeClass - Class to apply to the checked buttons\nexport const CHECKBOX_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ButtonCheckboxDirective),\n  multi: true\n};\n\n/**\n * Add checkbox functionality to any element\n */\n@Directive({\n  selector: '[btnCheckbox]',\n  providers: [CHECKBOX_CONTROL_VALUE_ACCESSOR]\n})\nexport class ButtonCheckboxDirective implements ControlValueAccessor, OnInit {\n  /** Truthy value, will be set to ngModel */\n  @Input() btnCheckboxTrue = true;\n  /** Falsy value, will be set to ngModel */\n  @Input() btnCheckboxFalse = false;\n\n  @HostBinding('class.active')\n  @HostBinding('attr.aria-pressed')\n  state = false;\n\n  protected value?: boolean | string;\n  protected isDisabled = false;\n\n  protected onChange = Function.prototype;\n  protected onTouched = Function.prototype;\n\n  // view -> model\n  @HostListener('click')\n  onClick(): void {\n    if (this.isDisabled) {\n      return;\n    }\n\n    this.toggle(!this.state);\n    this.onChange(this.value);\n  }\n\n  ngOnInit(): void {\n    this.toggle(this.trueValue === this.value);\n  }\n\n  protected get trueValue(): boolean {\n    return typeof this.btnCheckboxTrue !== 'undefined'\n      ? this.btnCheckboxTrue\n      : true;\n  }\n\n  protected get falseValue(): boolean {\n    return typeof this.btnCheckboxFalse !== 'undefined'\n      ? this.btnCheckboxFalse\n      : false;\n  }\n\n  toggle(state: boolean): void {\n    this.state = state;\n    this.value = this.state ? this.trueValue : this.falseValue;\n  }\n\n  // ControlValueAccessor\n  // model -> view\n  writeValue(value: boolean | string | null): void {\n    this.state = this.trueValue === value;\n    this.value = value ? this.trueValue : this.falseValue;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n  }\n\n  registerOnChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Inject,\n  Input,\n  OnChanges,\n  Optional,\n  Provider,\n  Renderer2,\n  SimpleChanges\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ButtonRadioGroupDirective } from './button-radio-group.directive';\n\nexport const RADIO_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ButtonRadioDirective),\n  multi: true\n};\n\n/**\n * Create radio buttons or groups of buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\n@Directive({\n  selector: '[btnRadio]',\n  providers: [RADIO_CONTROL_VALUE_ACCESSOR]\n})\nexport class ButtonRadioDirective implements ControlValueAccessor, OnChanges {\n  onChange = Function.prototype;\n  onTouched = Function.prototype;\n\n  /** Radio button value, will be set to `ngModel` */\n  @Input() btnRadio?: string;\n  /** If `true` — radio button can be unchecked */\n  @Input() uncheckable = false;\n  /** Current value of radio component or group */\n  @Input()\n  get value() {\n    return this.group ? this.group.value : this._value;\n  }\n\n  set value(value: string | undefined) {\n    if (this.group) {\n      this.group.value = value;\n\n      return;\n    }\n    this._value = value;\n    this._onChange(value);\n  }\n  /** If `true` — radio button is disabled */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  set disabled(disabled: boolean) {\n    this.setDisabledState(disabled);\n  }\n\n  @HostBinding('attr.aria-disabled')\n  get controlOrGroupDisabled() {\n    return this.disabled || (this.group && this.group.disabled) ? true : undefined;\n  }\n\n  @HostBinding('class.disabled')\n  get hasDisabledClass() {\n    // Although the radio is disabled the active radio should still stand out.\n    // The disabled class will prevent this so don't add it on the active radio\n    return this.controlOrGroupDisabled && !this.isActive;\n  }\n\n  @HostBinding('class.active')\n  @HostBinding('attr.aria-checked')\n  get isActive(): boolean {\n    return this.btnRadio === this.value;\n  }\n\n  @HostBinding('attr.role') readonly role: string = 'radio';\n\n  @HostBinding('attr.tabindex')\n  get tabindex(): undefined | number {\n    if (this.controlOrGroupDisabled) {\n      // Disabled radio buttons should not receive focus\n      return undefined;\n    } else if (this.isActive || this.group == null) {\n      return 0;\n    } else {\n      return -1;\n    }\n  }\n\n  get hasFocus(): boolean {\n    return this._hasFocus;\n  }\n\n  private _value?: string;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  constructor(\n    private el: ElementRef,\n    private cdr: ChangeDetectorRef,\n    private renderer: Renderer2,\n    @Optional()\n    @Inject(forwardRef(() => ButtonRadioGroupDirective))\n    private group: ButtonRadioGroupDirective\n  ) {}\n\n  @HostListener('click')\n  toggleIfAllowed(): void {\n    if (!this.canToggle()) {\n      return;\n    }\n\n    if (this.uncheckable && this.btnRadio === this.value) {\n      this.value = undefined;\n    } else {\n      this.value = this.btnRadio;\n    }\n  }\n\n  @HostListener('keydown.space', ['$event'])\n  onSpacePressed(event: KeyboardEvent) {\n    this.toggleIfAllowed();\n    event.preventDefault();\n  }\n\n  focus() {\n    this.el.nativeElement.focus();\n  }\n\n  @HostListener('focus')\n  onFocus() {\n    this._hasFocus = true;\n  }\n\n  @HostListener('blur')\n  onBlur() {\n    this._hasFocus = false;\n    this.onTouched();\n  }\n\n  canToggle(): boolean {\n    return !this.controlOrGroupDisabled && (this.uncheckable || this.btnRadio !== this.value);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if ('uncheckable' in changes) {\n      this.uncheckable = this.uncheckable !== false && typeof this.uncheckable !== 'undefined';\n    }\n  }\n\n  _onChange(value?: string): void {\n    if (this.group) {\n      this.group.value = value;\n\n      return;\n    }\n    this.onTouched();\n    this.onChange(value);\n  }\n\n  // ControlValueAccessor\n  // model -> view\n  writeValue(value: string): void {\n    this.value = value;\n    this.cdr.markForCheck();\n  }\n\n  registerOnChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(disabled: boolean): void {\n    this._disabled = disabled;\n    if (disabled) {\n      this.renderer.setAttribute(this.el.nativeElement, 'disabled', 'disabled');\n\n      return;\n    }\n    this.renderer.removeAttribute(this.el.nativeElement, 'disabled');\n  }\n}\n","import {\n  ChangeDetectorRef,\n  ContentChildren,\n  Directive,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Provider,\n  QueryList\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ButtonRadioDirective } from './button-radio.directive';\n\nexport const RADIO_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ButtonRadioGroupDirective),\n  multi: true\n};\n\n/**\n * A group of radio buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\n@Directive({\n  selector: '[btnRadioGroup]',\n  providers: [RADIO_CONTROL_VALUE_ACCESSOR]\n})\nexport class ButtonRadioGroupDirective implements ControlValueAccessor {\n  onChange = Function.prototype;\n  onTouched = Function.prototype;\n\n  @HostBinding('attr.role') readonly role: string = 'radiogroup';\n\n  @ContentChildren(forwardRef(() => ButtonRadioDirective))\n  radioButtons?: QueryList<ButtonRadioDirective>;\n\n  constructor(private cdr: ChangeDetectorRef) {\n  }\n\n  private _value?: string;\n\n  get value() {\n    return this._value;\n  }\n\n  set value(value: string | undefined) {\n    this._value = value;\n    this.onChange(value);\n  }\n\n  private _disabled = false;\n\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  @HostBinding('attr.tabindex')\n  get tabindex(): null | number {\n    if (this._disabled) {\n      return null;\n    } else {\n      return 0;\n    }\n  }\n\n  writeValue(value?: string): void {\n    this._value = value;\n    this.cdr.markForCheck();\n  }\n\n  registerOnChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(disabled: boolean): void {\n    if (this.radioButtons) {\n      this._disabled = disabled;\n      this.radioButtons.forEach(buttons => {\n        buttons.setDisabledState(disabled);\n      });\n      this.cdr.markForCheck();\n    }\n  }\n\n  @HostListener('focus')\n  onFocus() {\n    if (this._disabled) {\n      return;\n    }\n    const activeRadio = this.getActiveOrFocusedRadio();\n    if (activeRadio) {\n      activeRadio.focus();\n      return;\n    }\n\n    if (this.radioButtons) {\n      const firstEnabled = this.radioButtons.find(r => !r.disabled);\n      if (firstEnabled) {\n        firstEnabled.focus();\n      }\n    }\n  }\n\n  @HostListener('blur')\n  onBlur() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  @HostListener('keydown.ArrowRight', ['$event'])\n  @HostListener('keydown.ArrowDown', ['$event'])\n  selectNext(event: KeyboardEvent) {\n    this.selectInDirection('next');\n    event.preventDefault();\n  }\n\n  @HostListener('keydown.ArrowLeft', ['$event'])\n  @HostListener('keydown.ArrowUp', ['$event'])\n  selectPrevious(event: KeyboardEvent) {\n    this.selectInDirection('previous');\n    event.preventDefault();\n  }\n\n  private selectInDirection(direction: 'next' | 'previous') {\n    if (this._disabled) {\n      return;\n    }\n\n    function nextIndex(currentIndex: number, buttonRadioDirectives: ButtonRadioDirective[]) {\n      const step = direction === 'next' ? 1 : -1;\n      let calcIndex = (currentIndex + step) % buttonRadioDirectives.length;\n      if (calcIndex < 0) {\n        calcIndex = buttonRadioDirectives.length - 1;\n      }\n\n      return calcIndex;\n    }\n\n    const activeRadio = this.getActiveOrFocusedRadio();\n\n    if (activeRadio && this.radioButtons) {\n      const buttonRadioDirectives = this.radioButtons.toArray();\n      const currentActiveIndex = buttonRadioDirectives.indexOf(activeRadio);\n      for (\n        let i = nextIndex(currentActiveIndex, buttonRadioDirectives);\n        i !== currentActiveIndex;\n        i = nextIndex(i, buttonRadioDirectives)\n      ) {\n        if (buttonRadioDirectives[i].canToggle()) {\n          buttonRadioDirectives[i].toggleIfAllowed();\n          buttonRadioDirectives[i].focus();\n          break;\n        }\n      }\n    }\n  }\n\n  private getActiveOrFocusedRadio(): ButtonRadioDirective | undefined {\n    if (!this.radioButtons) {\n      return void 0;\n    }\n\n    return this.radioButtons.find(button => button.isActive)\n      || this.radioButtons.find(button => button.hasFocus);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { ButtonCheckboxDirective } from './button-checkbox.directive';\nimport { ButtonRadioDirective } from './button-radio.directive';\nimport { ButtonRadioGroupDirective } from './button-radio-group.directive';\n\n@NgModule({\n  declarations: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective],\n  exports: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective]\n})\nexport class ButtonsModule {\n  static forRoot(): ModuleWithProviders<ButtonsModule> {\n    return { ngModule: ButtonsModule, providers: [] };\n  }\n}\n"]}